{"version":3,"sources":["components/card.js","components/loader.js","App.js","serviceWorker.js","index.js"],"names":["Card","data","className","Confirmed","Active","Recovered","Deaths","Date","href","target","rel","Loader","width","height","viewBox","xmlns","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","App","state","loading","value","Intl","NumberFormat","format","this","setState","yesterday","dayjs","subtract","today","endpoint","fetch","method","redirect","then","response","json","Country","formatNumber","catch","error","console","log","fetchData","role","aria-label","style","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qMA0CeA,EAxCF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEd,OAEE,oCAEE,yBAAKC,UAAU,mDAEb,yBAAKA,UAAU,+FACb,0BAAMA,UAAU,sBAAsBD,EAAKE,WAC3C,0BAAMD,UAAU,qBAAhB,gBAGF,yBAAKA,UAAU,+FACb,0BAAMA,UAAU,sBAAsBD,EAAKG,QAC3C,0BAAMF,UAAU,qBAAhB,WAGF,yBAAKA,UAAU,gGACb,0BAAMA,UAAU,sBAAsBD,EAAKI,WAC3C,0BAAMH,UAAU,qBAAhB,gBAGF,yBAAKA,UAAU,8FACb,0BAAMA,UAAU,sBAAsBD,EAAKK,QAC3C,0BAAMJ,UAAU,qBAAhB,YAKJ,uBAAGA,UAAU,qCAAb,iBACiBD,EAAKM,KADtB,6BACqD,uBAAGC,KAAK,0BAA0BN,UAAU,YAAYO,OAAO,SAASC,IAAI,uBAA5E,kBADrD,OCbSC,EAjBA,WAEb,OACE,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,6BAA6Bb,UAAU,iCAC3F,uBAAGc,KAAK,OAAOC,SAAS,WACtB,uBAAGC,UAAU,iBAAiBC,YAAY,KACxC,4BAAQC,cAAc,KAAKC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC7C,0BAAMC,EAAE,+BACN,sCAAkBC,cAAc,YAAYC,KAAK,SAASC,KAAK,UAAUC,GAAG,YAAYC,IAAI,KAAKC,YAAY,oBC0D1GC,E,4MA7DbC,MAAQ,CACNC,SAAS,EACThC,KAAM,I,2DAGKiC,GACX,OAAO,IAAIC,KAAKC,aAAa,SAASC,OAAOH,K,kCAGlC,IAAD,OAEVI,KAAKC,SAAS,CAAEN,SAAS,IAEzB,IAAMO,EAAYC,IAAQC,SAAS,EAAG,OAAOL,OAAO,cAC9CM,EAAQF,IAAQJ,OAAO,cACvBO,EAAQ,yDAAqDJ,EAArD,yBAA+EG,EAA/E,cAEdE,MAAMD,EAAU,CAAEE,OAAQ,MAAOC,SAAU,WACxCC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAc,IAAD,EAE8CA,EAAS,GAAjEE,EAFU,EAEVA,QAAS5C,EAFC,EAEDA,KAAMJ,EAFL,EAEKA,UAAWG,EAFhB,EAEgBA,OAAQD,EAFxB,EAEwBA,UAAWD,EAFnC,EAEmCA,OAC/CH,EAAO,CACXkD,UACA5C,KAAMkC,EAAMlC,GAAM8B,OAAO,cACzBlC,UAAW,EAAKiD,aAAajD,GAC7BG,OAAQ,EAAK8C,aAAa9C,GAC1BD,UAAW,EAAK+C,aAAa/C,GAC7BD,OAAQ,EAAKgD,aAAahD,IAG5B,EAAKmC,SAAS,CAAEtC,OAAMgC,SAAS,OAGhCoB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,QAASF,Q,0CAKzChB,KAAKmB,c,+BAKL,OAEE,yBAAKvD,UAAU,wFAEZoC,KAAKN,MAAMC,QAAU,kBAAC,EAAD,MAAa,oCACjC,0BAAM/B,UAAU,uBAAuBwD,KAAK,MAAMC,aAAW,oBAAoBC,MAAO,CAAEC,OAAQ,uBAAlG,gBACA,kBAAC,EAAD,CAAM5D,KAAMqC,KAAKN,MAAM/B,a,GApDf6D,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,a","file":"static/js/main.53fa8776.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ data }) => {\n\n  return (\n\n    <>\n\n      <div className=\"flex flex-row sm:flex-col md:flex-row space-x-6\">\n\n        <div className=\"flex flex-col text-center w-48 inline-block bg-gray-600 rounded px-3 py-8 text-white shadow\">\n          <span className=\"font-bold text-2xl\">{data.Confirmed}</span>\n          <span className=\"text-xs uppercase\">Confirmados</span>\n        </div>\n\n        <div className=\"flex flex-col text-center w-48 inline-block bg-blue-600 rounded px-3 py-8 text-white shadow\">\n          <span className=\"font-bold text-2xl\">{data.Active}</span>\n          <span className=\"text-xs uppercase\">Ativos</span>\n        </div>\n\n        <div className=\"flex flex-col text-center w-48 inline-block bg-green-600 rounded px-3 py-8 text-white shadow\">\n          <span className=\"font-bold text-2xl\">{data.Recovered}</span>\n          <span className=\"text-xs uppercase\">Recuperados</span>\n        </div>\n\n        <div className=\"flex flex-col text-center w-48 inline-block bg-red-600 rounded px-3 py-8 text-white shadow\">\n          <span className=\"font-bold text-2xl\">{data.Deaths}</span>\n          <span className=\"text-xs uppercase\">Mortes</span>\n        </div>\n\n      </div>\n\n      <p className=\"text-gray-700 text-xs text-center\">\n        Atualizado em {data.Date} com dados fornecidos por <a href=\"https://covid19api.com/\" className=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\">covid19api.com</a>.\n      </p>\n\n    </>\n\n  );\n\n};\n\nexport default Card;\n","import React from 'react';\n\nconst Loader = () => {\n\n  return (\n    <svg width=\"52\" height=\"52\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\" className=\"stroke-current text-green-500\">\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n          <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n          <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n            <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 18 18\" to=\"360 18 18\" dur=\"1s\" repeatCount=\"indefinite\" />\n          </path>\n        </g>\n      </g>\n    </svg>\n  );\n\n};\n\nexport default Loader;\n","import * as dayjs from 'dayjs';\nimport React, { Component } from 'react';\nimport Card from './components/card';\nimport Loader from './components/loader';\n\nclass App extends Component {\n\n  state = {\n    loading: true,\n    data: []\n  }\n\n  formatNumber(value) {\n    return new Intl.NumberFormat('pt-BR').format(value);\n  }\n\n  fetchData() {\n\n    this.setState({ loading: true });\n\n    const yesterday = dayjs().subtract(1, 'day').format('YYYY-MM-DD');\n    const today = dayjs().format('YYYY-MM-DD');\n    const endpoint = `https://api.covid19api.com/country/brazil?from=${yesterday}T00:00:00Z&to=${today}T00:00:00Z`;\n\n    fetch(endpoint, { method: 'GET', redirect: 'follow' })\n      .then((response) => response.json())\n      .then((response) => {\n\n        const { Country, Date, Confirmed, Deaths, Recovered, Active } = response[0];\n        const data = {\n          Country,\n          Date: dayjs(Date).format('DD/MM/YYYY'),\n          Confirmed: this.formatNumber(Confirmed),\n          Deaths: this.formatNumber(Deaths),\n          Recovered: this.formatNumber(Recovered),\n          Active: this.formatNumber(Active),\n        };\n\n        this.setState({ data, loading: false });\n\n      })\n      .catch((error) => console.log('error', error));\n\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n\n    return (\n\n      <div className=\"flex flex-col content-center justify-center flex-wrap bg-gray-300 h-screen space-y-6\">\n\n        {this.state.loading ? <Loader /> : <>\n          <span className=\"text-6xl text-center\" role=\"img\" aria-label=\"A red virus emoji\" style={{ filter: 'hue-rotate(270deg)' }}>ðŸ¦ </span>\n          <Card data={this.state.data} />\n        </>}\n\n      </div>\n\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}